// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDeleteReleaseParams creates a new DeleteReleaseParams object
//
// There are no default values defined in the spec.
func NewDeleteReleaseParams() DeleteReleaseParams {

	return DeleteReleaseParams{}
}

// DeleteReleaseParams contains all the bound params for the delete release operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteRelease
type DeleteReleaseParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Prefix
	  Required: true
	  Max Length: 41
	  Min Length: 14
	  In: query
	*/
	Prefix string
	/*Prefix length
	  Required: true
	  In: query
	*/
	Prefixlen int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteReleaseParams() beforehand.
func (o *DeleteReleaseParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPrefix, qhkPrefix, _ := qs.GetOK("prefix")
	if err := o.bindPrefix(qPrefix, qhkPrefix, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrefixlen, qhkPrefixlen, _ := qs.GetOK("prefixlen")
	if err := o.bindPrefixlen(qPrefixlen, qhkPrefixlen, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindPrefix binds and validates parameter Prefix from query.
func (o *DeleteReleaseParams) bindPrefix(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("prefix", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("prefix", "query", raw); err != nil {
		return err
	}
	o.Prefix = raw

	if err := o.validatePrefix(formats); err != nil {
		return err
	}

	return nil
}

// validatePrefix carries on validations for parameter Prefix
func (o *DeleteReleaseParams) validatePrefix(formats strfmt.Registry) error {

	if err := validate.MinLength("prefix", "query", o.Prefix, 14); err != nil {
		return err
	}

	if err := validate.MaxLength("prefix", "query", o.Prefix, 41); err != nil {
		return err
	}

	return nil
}

// bindPrefixlen binds and validates parameter Prefixlen from query.
func (o *DeleteReleaseParams) bindPrefixlen(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("prefixlen", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("prefixlen", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("prefixlen", "query", "int64", raw)
	}
	o.Prefixlen = value

	if err := o.validatePrefixlen(formats); err != nil {
		return err
	}

	return nil
}

// validatePrefixlen carries on validations for parameter Prefixlen
func (o *DeleteReleaseParams) validatePrefixlen(formats strfmt.Registry) error {

	if err := validate.EnumCase("prefixlen", "query", o.Prefixlen, []interface{}{64, 127}, true); err != nil {
		return err
	}

	return nil
}
