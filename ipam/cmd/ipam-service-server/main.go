package main

import (
	"log"
	"os"
	"time"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	psql "github.com/alexvancasper/TunnelBroker/ipam/internal/database"
	"github.com/alexvancasper/TunnelBroker/ipam/internal/handler"
	"github.com/alexvancasper/TunnelBroker/ipam/internal/handler/operations"
	sh "github.com/alexvancasper/TunnelBroker/ipam/internal/servicesHandler"
	formatter "github.com/fabienm/go-logrus-formatters"
	"github.com/sirupsen/logrus"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

type Defaults struct {
	Port int    `short:"p" long:"port" description:"Listening port"`
	Host string `short:"h" long:"host" description:"Listening host"`
}

func main() {

	//Initialize Logging connections
	var MyLogger = logrus.New()

	gelfFmt := formatter.NewGelf("IPAM service")
	MyLogger.SetFormatter(gelfFmt)
	MyLogger.SetOutput(os.Stdout)
	loglevel, err := logrus.ParseLevel("debug")
	if err != nil {
		MyLogger.WithField("function", "main").Fatalf("error %v", err)
	}
	MyLogger.SetLevel(loglevel)
	sh.SHandler.Log = MyLogger

	//Initialize database connections
	sh.SHandler.DB, err = psql.New(os.Getenv("APP_DSN"), 5)
	sh.SHandler.Timeout = time.Duration(1000)
	if err != nil {
		MyLogger.WithField("DSN", os.Getenv("APP_DSN"))
		MyLogger.Fatal(err)
	}
	defer sh.SHandler.DB.CloseConnection()
	MyLogger.Info("Database connection successfully")
	err = psql.MigrationUP(sh.SHandler.DB)
	if err != nil {
		MyLogger.Fatal(err)
	}
	MyLogger.Info("Migration is done")

	//API
	swaggerSpec, err := loads.Embedded(handler.SwaggerJSON, handler.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewIpamServiceAPI(swaggerSpec)
	server := handler.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "IPAM service"
	parser.LongDescription = "IP address management"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	defaultOptions := Defaults{}
	portParser := flags.NewParser(&defaultOptions, flags.Default)
	portParser.Parse()

	server.Port = defaultOptions.Port
	server.Host = defaultOptions.Host
	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}

// converter from string to int. string value from getenv.
// func converter(name string) int {
// 	l := MyLogger.WithField("function", "converter")
// 	value, err := strconv.Atoi(os.Getenv(name))
// 	if err != nil {
// 		l.WithField(name, os.Getenv(name)).Fatal("cannot be converted to number")
// 	}
// 	return value
// }
